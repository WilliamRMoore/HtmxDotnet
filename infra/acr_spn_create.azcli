# using the MS instructions to configure a github action to create a container registry.
# https://learn.microsoft.com/en-us/azure/container-instances/container-instances-github-action


# set region, resource group, az container registry
# region=eastus
# rgName=will-htmx
# acrName=willhtmxacr

region=eastus
rgName=testme
acrName=htmxacr
appSvcName=htmxappsvc
appSvcPlanName=htmxappsvcplan
dockerImageName=htmx-image

# set default region and rg
az config set defaults.location=$region defaults.group=$rgName

# get the resource group id
groupId=$(az group show --query id --output tsv)

# create the service principal and capture the output for later
spData=$(az ad sp create-for-rbac \
  --scope $groupId \
  --role Contributor \
  --sdk-auth)

# create az container registry
az acr create \
    --name $acrName \
    --sku Basic

# get the container registry id
acrId=$(az acr show \
  --name $acrName \
  --query id --output tsv)

# parse the clientId from sp creation
clientId=$(echo $spData | jq -r '.clientId')

# give the service principal access to push to the container registry
az role assignment create \
  --assignee $clientId \
  --scope $acrId \
  --role AcrPush

# create the app service plan
az appservice plan create \
    --resource-group $rgName \
    --name $appSvcPlanName \
    --is-linux \
    --sku F1

# create the web app
# https://azure.github.io/AppService/2024/09/17/How-to-pull-from-ACR-with-Managed-Identity-using-Windows-containers.html
az webapp create \
   --resource-group $rgName \
   --name $appSvcName \
   --plan $appSvcPlanName \
   --container-image-name $acrName.azurecr.io/$dockerImageName:latest \
   --assign-identity [system] \
   --acr-identity [system] \
   --acr-use-identity

principalId=$(az webapp identity show \
    --resource-group $rgName \
    --name $appSvcName \
    --query principalId \
    --output tsv)

# Grant the managed identity permission to access the container registry
az role assignment create \
    --assignee $principalId \
    --scope $acrId \
    --role "AcrPull"


# Set vars we're going to need for the secrets for the github action

AZURE_CREDENTIALS=$spData

REGISTRY_LOGIN_SERVER=$(az acr show \
  --name $acrName \
  --query loginServer --output tsv)

REGISTRY_USERNAME=$clientId

REGISTRY_PASSWORD=$(echo $spData | jq -r '.clientSecret')

RESOURCE_GROUP=$rgName

echo
echo AZURE_CREDENTIALS
echo $AZURE_CREDENTIALS
echo
echo REGISTRY_LOGIN_SERVER
echo $REGISTRY_LOGIN_SERVER
echo 
echo REGISTRY_USERNAME
echo $REGISTRY_USERNAME
echo 
echo REGISTRY_PASSWORD
echo $REGISTRY_PASSWORD
echo 
echo RESOURCE_GROUP
echo $RESOURCE_GROUP


###############
# clean up
###############
#   
#   az acr delete --name $acrName --yes
#
#   az ad sp delete --id $clientId
